export module jpeg:tables;

// tables.cpp
// Hardcoded tables and functions to generate new ones.

import msg;

import :data.tables;

export namespace jpeg {
// All Huffman tables generated by HuffmanTable::as_init_list().
// All table values pulled from Annex K of the JPEG standard.

// Luma DC
const HuffmanTable hufftable_dc0 {
        { 0, 2, 0x0 },
        { 0, 3, 0x1 },
        { 0, 3, 0x2 },
        { 0, 3, 0x3 },
        { 0, 3, 0x4 },
        { 0, 3, 0x5 },
        { 0, 4, 0x6 },
        { 0, 5, 0x7 },
        { 0, 6, 0x8 },
        { 0, 7, 0x9 },
        { 0, 8, 0xA },
        { 0, 9, 0xB }
};

// Luma AC
const HuffmanTable hufftable_ac0 {
        { 0, 2, 0x1 },
        { 0, 2, 0x2 },
        { 0, 3, 0x3 },
        { 0, 4, 0x0 },
        { 0, 4, 0x4 },
        { 0, 4, 0x11 },
        { 0, 5, 0x5 },
        { 0, 5, 0x12 },
        { 0, 5, 0x21 },
        { 0, 6, 0x31 },
        { 0, 6, 0x41 },
        { 0, 7, 0x6 },
        { 0, 7, 0x13 },
        { 0, 7, 0x51 },
        { 0, 7, 0x61 },
        { 0, 8, 0x7 },
        { 0, 8, 0x22 },
        { 0, 8, 0x71 },
        { 0, 9, 0x14 },
        { 0, 9, 0x32 },
        { 0, 9, 0x81 },
        { 0, 9, 0x91 },
        { 0, 9, 0xA1 },
        { 0, 10, 0x8 },
        { 0, 10, 0x23 },
        { 0, 10, 0x42 },
        { 0, 10, 0xB1 },
        { 0, 10, 0xC1 },
        { 0, 11, 0x15 },
        { 0, 11, 0x52 },
        { 0, 11, 0xD1 },
        { 0, 11, 0xF0 },
        { 0, 12, 0x24 },
        { 0, 12, 0x33 },
        { 0, 12, 0x62 },
        { 0, 12, 0x72 },
        { 0, 15, 0x82 },
        { 0, 16, 0x9 },
        { 0, 16, 0xA },
        { 0, 16, 0x16 },
        { 0, 16, 0x17 },
        { 0, 16, 0x18 },
        { 0, 16, 0x19 },
        { 0, 16, 0x1A },
        { 0, 16, 0x25 },
        { 0, 16, 0x26 },
        { 0, 16, 0x27 },
        { 0, 16, 0x28 },
        { 0, 16, 0x29 },
        { 0, 16, 0x2A },
        { 0, 16, 0x34 },
        { 0, 16, 0x35 },
        { 0, 16, 0x36 },
        { 0, 16, 0x37 },
        { 0, 16, 0x38 },
        { 0, 16, 0x39 },
        { 0, 16, 0x3A },
        { 0, 16, 0x43 },
        { 0, 16, 0x44 },
        { 0, 16, 0x45 },
        { 0, 16, 0x46 },
        { 0, 16, 0x47 },
        { 0, 16, 0x48 },
        { 0, 16, 0x49 },
        { 0, 16, 0x4A },
        { 0, 16, 0x53 },
        { 0, 16, 0x54 },
        { 0, 16, 0x55 },
        { 0, 16, 0x56 },
        { 0, 16, 0x57 },
        { 0, 16, 0x58 },
        { 0, 16, 0x59 },
        { 0, 16, 0x5A },
        { 0, 16, 0x63 },
        { 0, 16, 0x64 },
        { 0, 16, 0x65 },
        { 0, 16, 0x66 },
        { 0, 16, 0x67 },
        { 0, 16, 0x68 },
        { 0, 16, 0x69 },
        { 0, 16, 0x6A },
        { 0, 16, 0x73 },
        { 0, 16, 0x74 },
        { 0, 16, 0x75 },
        { 0, 16, 0x76 },
        { 0, 16, 0x77 },
        { 0, 16, 0x78 },
        { 0, 16, 0x79 },
        { 0, 16, 0x7A },
        { 0, 16, 0x83 },
        { 0, 16, 0x84 },
        { 0, 16, 0x85 },
        { 0, 16, 0x86 },
        { 0, 16, 0x87 },
        { 0, 16, 0x88 },
        { 0, 16, 0x89 },
        { 0, 16, 0x8A },
        { 0, 16, 0x92 },
        { 0, 16, 0x93 },
        { 0, 16, 0x94 },
        { 0, 16, 0x95 },
        { 0, 16, 0x96 },
        { 0, 16, 0x97 },
        { 0, 16, 0x98 },
        { 0, 16, 0x99 },
        { 0, 16, 0x9A },
        { 0, 16, 0xA2 },
        { 0, 16, 0xA3 },
        { 0, 16, 0xA4 },
        { 0, 16, 0xA5 },
        { 0, 16, 0xA6 },
        { 0, 16, 0xA7 },
        { 0, 16, 0xA8 },
        { 0, 16, 0xA9 },
        { 0, 16, 0xAA },
        { 0, 16, 0xB2 },
        { 0, 16, 0xB3 },
        { 0, 16, 0xB4 },
        { 0, 16, 0xB5 },
        { 0, 16, 0xB6 },
        { 0, 16, 0xB7 },
        { 0, 16, 0xB8 },
        { 0, 16, 0xB9 },
        { 0, 16, 0xBA },
        { 0, 16, 0xC2 },
        { 0, 16, 0xC3 },
        { 0, 16, 0xC4 },
        { 0, 16, 0xC5 },
        { 0, 16, 0xC6 },
        { 0, 16, 0xC7 },
        { 0, 16, 0xC8 },
        { 0, 16, 0xC9 },
        { 0, 16, 0xCA },
        { 0, 16, 0xD2 },
        { 0, 16, 0xD3 },
        { 0, 16, 0xD4 },
        { 0, 16, 0xD5 },
        { 0, 16, 0xD6 },
        { 0, 16, 0xD7 },
        { 0, 16, 0xD8 },
        { 0, 16, 0xD9 },
        { 0, 16, 0xDA },
        { 0, 16, 0xE1 },
        { 0, 16, 0xE2 },
        { 0, 16, 0xE3 },
        { 0, 16, 0xE4 },
        { 0, 16, 0xE5 },
        { 0, 16, 0xE6 },
        { 0, 16, 0xE7 },
        { 0, 16, 0xE8 },
        { 0, 16, 0xE9 },
        { 0, 16, 0xEA },
        { 0, 16, 0xF1 },
        { 0, 16, 0xF2 },
        { 0, 16, 0xF3 },
        { 0, 16, 0xF4 },
        { 0, 16, 0xF5 },
        { 0, 16, 0xF6 },
        { 0, 16, 0xF7 },
        { 0, 16, 0xF8 },
        { 0, 16, 0xF9 },
        { 0, 16, 0xFA }
};

// Chroma DC
const HuffmanTable hufftable_dc1 {
        { 0, 2, 0x0 },
        { 0, 2, 0x1 },
        { 0, 2, 0x2 },
        { 0, 3, 0x3 },
        { 0, 4, 0x4 },
        { 0, 5, 0x5 },
        { 0, 6, 0x6 },
        { 0, 7, 0x7 },
        { 0, 8, 0x8 },
        { 0, 9, 0x9 },
        { 0, 10, 0xA },
        { 0, 11, 0xB }
};

// Chroma AC
const HuffmanTable hufftable_ac1 {
        { 0, 2, 0x0 },
        { 0, 2, 0x1 },
        { 0, 3, 0x2 },
        { 0, 4, 0x3 },
        { 0, 4, 0x11 },
        { 0, 5, 0x4 },
        { 0, 5, 0x5 },
        { 0, 5, 0x21 },
        { 0, 5, 0x31 },
        { 0, 6, 0x6 },
        { 0, 6, 0x12 },
        { 0, 6, 0x41 },
        { 0, 6, 0x51 },
        { 0, 7, 0x7 },
        { 0, 7, 0x61 },
        { 0, 7, 0x71 },
        { 0, 8, 0x13 },
        { 0, 8, 0x22 },
        { 0, 8, 0x32 },
        { 0, 8, 0x81 },
        { 0, 9, 0x8 },
        { 0, 9, 0x14 },
        { 0, 9, 0x42 },
        { 0, 9, 0x91 },
        { 0, 9, 0xA1 },
        { 0, 9, 0xB1 },
        { 0, 9, 0xC1 },
        { 0, 10, 0x9 },
        { 0, 10, 0x23 },
        { 0, 10, 0x33 },
        { 0, 10, 0x52 },
        { 0, 10, 0xF0 },
        { 0, 11, 0x15 },
        { 0, 11, 0x62 },
        { 0, 11, 0x72 },
        { 0, 11, 0xD1 },
        { 0, 12, 0xA },
        { 0, 12, 0x16 },
        { 0, 12, 0x24 },
        { 0, 12, 0x34 },
        { 0, 14, 0xE1 },
        { 0, 15, 0x25 },
        { 0, 15, 0xF1 },
        { 0, 16, 0x17 },
        { 0, 16, 0x18 },
        { 0, 16, 0x19 },
        { 0, 16, 0x1A },
        { 0, 16, 0x26 },
        { 0, 16, 0x27 },
        { 0, 16, 0x28 },
        { 0, 16, 0x29 },
        { 0, 16, 0x2A },
        { 0, 16, 0x35 },
        { 0, 16, 0x36 },
        { 0, 16, 0x37 },
        { 0, 16, 0x38 },
        { 0, 16, 0x39 },
        { 0, 16, 0x3A },
        { 0, 16, 0x43 },
        { 0, 16, 0x44 },
        { 0, 16, 0x45 },
        { 0, 16, 0x46 },
        { 0, 16, 0x47 },
        { 0, 16, 0x48 },
        { 0, 16, 0x49 },
        { 0, 16, 0x4A },
        { 0, 16, 0x53 },
        { 0, 16, 0x54 },
        { 0, 16, 0x55 },
        { 0, 16, 0x56 },
        { 0, 16, 0x57 },
        { 0, 16, 0x58 },
        { 0, 16, 0x59 },
        { 0, 16, 0x5A },
        { 0, 16, 0x63 },
        { 0, 16, 0x64 },
        { 0, 16, 0x65 },
        { 0, 16, 0x66 },
        { 0, 16, 0x67 },
        { 0, 16, 0x68 },
        { 0, 16, 0x69 },
        { 0, 16, 0x6A },
        { 0, 16, 0x73 },
        { 0, 16, 0x74 },
        { 0, 16, 0x75 },
        { 0, 16, 0x76 },
        { 0, 16, 0x77 },
        { 0, 16, 0x78 },
        { 0, 16, 0x79 },
        { 0, 16, 0x7A },
        { 0, 16, 0x82 },
        { 0, 16, 0x83 },
        { 0, 16, 0x84 },
        { 0, 16, 0x85 },
        { 0, 16, 0x86 },
        { 0, 16, 0x87 },
        { 0, 16, 0x88 },
        { 0, 16, 0x89 },
        { 0, 16, 0x8A },
        { 0, 16, 0x92 },
        { 0, 16, 0x93 },
        { 0, 16, 0x94 },
        { 0, 16, 0x95 },
        { 0, 16, 0x96 },
        { 0, 16, 0x97 },
        { 0, 16, 0x98 },
        { 0, 16, 0x99 },
        { 0, 16, 0x9A },
        { 0, 16, 0xA2 },
        { 0, 16, 0xA3 },
        { 0, 16, 0xA4 },
        { 0, 16, 0xA5 },
        { 0, 16, 0xA6 },
        { 0, 16, 0xA7 },
        { 0, 16, 0xA8 },
        { 0, 16, 0xA9 },
        { 0, 16, 0xAA },
        { 0, 16, 0xB2 },
        { 0, 16, 0xB3 },
        { 0, 16, 0xB4 },
        { 0, 16, 0xB5 },
        { 0, 16, 0xB6 },
        { 0, 16, 0xB7 },
        { 0, 16, 0xB8 },
        { 0, 16, 0xB9 },
        { 0, 16, 0xBA },
        { 0, 16, 0xC2 },
        { 0, 16, 0xC3 },
        { 0, 16, 0xC4 },
        { 0, 16, 0xC5 },
        { 0, 16, 0xC6 },
        { 0, 16, 0xC7 },
        { 0, 16, 0xC8 },
        { 0, 16, 0xC9 },
        { 0, 16, 0xCA },
        { 0, 16, 0xD2 },
        { 0, 16, 0xD3 },
        { 0, 16, 0xD4 },
        { 0, 16, 0xD5 },
        { 0, 16, 0xD6 },
        { 0, 16, 0xD7 },
        { 0, 16, 0xD8 },
        { 0, 16, 0xD9 },
        { 0, 16, 0xDA },
        { 0, 16, 0xE2 },
        { 0, 16, 0xE3 },
        { 0, 16, 0xE4 },
        { 0, 16, 0xE5 },
        { 0, 16, 0xE6 },
        { 0, 16, 0xE7 },
        { 0, 16, 0xE8 },
        { 0, 16, 0xE9 },
        { 0, 16, 0xEA },
        { 0, 16, 0xF2 },
        { 0, 16, 0xF3 },
        { 0, 16, 0xF4 },
        { 0, 16, 0xF5 },
        { 0, 16, 0xF6 },
        { 0, 16, 0xF7 },
        { 0, 16, 0xF8 },
        { 0, 16, 0xF9 },
        { 0, 16, 0xFA }
};

// Base quantization tables for luma and chroma components, corresponding to a
// quality value of 50.
const QuantizationTable qtable_base_luma {
	16, 11, 10, 16, 24,  40,  51,  61,
	12, 12, 14, 19, 26,  58,  60,  55,
	14, 13, 16, 24, 40,  57,  69,  56,
	14, 17, 22, 29, 51,  87,  80,  62,
	18, 22, 37, 56, 68,  109, 103, 77,
	24, 35, 55, 64, 81,  104, 113, 92,
	49, 64, 78, 87, 103, 121, 120, 101,
	72, 92, 95, 98, 112, 100, 103, 99
};

const QuantizationTable qtable_base_chroma {
	17, 18, 24, 47, 99, 99, 99, 99,
	18, 21, 26, 66, 99, 99, 99, 99,
	24, 26, 56, 99, 99, 99, 99, 99,
	47, 66, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99
};

// Calculates a multiplier for the base quantization tables
// based on a quality scale from 0-100.
//
// quality_factor(0) = b
// quality_factor(50) = 1
// quality_factor(100) = 1/b
double quality_factor(unsigned int quality) {
	double b = 50.0;

	if (quality > 100) {
		throw std::invalid_argument("quality_factor: quality must be between 0 and 100");
	}

	return std::pow(b, 1.0 - quality/50.0);
}

// Generates a quantization table to use for encoding, based on a quality scale
// from 0-100.
QuantizationTable generate_qtable(const QuantizationTable& base, unsigned int quality) {
	double qfactor = quality_factor(quality);
	msg::debug("TABLE: generate_qtable: quality={}, qfactor={}", quality, qfactor);

	auto table_mat = base.data.scalar_mul(qfactor).clamp(1, 1000);

	return QuantizationTable(table_mat);
}
}
